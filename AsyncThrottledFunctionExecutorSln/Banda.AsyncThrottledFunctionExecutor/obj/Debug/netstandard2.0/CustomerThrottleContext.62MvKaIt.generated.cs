// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using ImmutableObjectGraph.Generation;

namespace Banda.AsyncThrottledFunctionExecutor
{
    partial class CustomerThrottleContext
    {
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private static readonly CustomerThrottleContext DefaultInstance = GetDefaultTemplate();
        private static int lastIdentityProduced;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private readonly uint identity;
        [System.ObsoleteAttribute("This constructor for use with deserializers only. Use the static Create factory method instead.")]
        public CustomerThrottleContext(Banda.AsyncThrottledFunctionExecutor.CustomerThrottle CustomerThrottle, System.Object TokenBucket): this(NewIdentity(), customerThrottle: CustomerThrottle, tokenBucket: TokenBucket, skipValidation: false)
        {
        }

        protected CustomerThrottleContext(uint identity, Banda.AsyncThrottledFunctionExecutor.CustomerThrottle customerThrottle, System.Object tokenBucket, bool skipValidation)
        {
            this.identity = identity;
            this.customerThrottle = customerThrottle;
            this.tokenBucket = tokenBucket;
            if (!skipValidation)
            {
                this.Validate();
            }
        }

        public CustomerThrottle CustomerThrottle => this.customerThrottle;
        public object TokenBucket => this.tokenBucket;
        internal protected uint Identity => this.identity;
        public static CustomerThrottleContext Create(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle> customerThrottle = default(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle>), ImmutableObjectGraph.Optional<System.Object> tokenBucket = default(ImmutableObjectGraph.Optional<System.Object>))
        {
            var identity = ImmutableObjectGraph.Optional.For(NewIdentity());
            return DefaultInstance.WithFactory(customerThrottle: ImmutableObjectGraph.Optional.For(customerThrottle.GetValueOrDefault(DefaultInstance.CustomerThrottle)), tokenBucket: ImmutableObjectGraph.Optional.For(tokenBucket.GetValueOrDefault(DefaultInstance.TokenBucket)), identity: identity);
        }

        public CustomerThrottleContext With(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle> customerThrottle = default(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle>), ImmutableObjectGraph.Optional<System.Object> tokenBucket = default(ImmutableObjectGraph.Optional<System.Object>))
        {
            return (CustomerThrottleContext)this.WithCore(customerThrottle: customerThrottle, tokenBucket: tokenBucket);
        }

        static protected uint NewIdentity()
        {
            return (uint)System.Threading.Interlocked.Increment(ref lastIdentityProduced);
        }

        protected virtual CustomerThrottleContext WithCore(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle> customerThrottle = default(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle>), ImmutableObjectGraph.Optional<System.Object> tokenBucket = default(ImmutableObjectGraph.Optional<System.Object>))
        {
            return this.WithFactory(customerThrottle: customerThrottle, tokenBucket: tokenBucket, identity: ImmutableObjectGraph.Optional.For(this.Identity));
        }

        static partial void CreateDefaultTemplate(ref Template template);
        private static CustomerThrottleContext GetDefaultTemplate()
        {
            var template = new Template();
            CreateDefaultTemplate(ref template);
            return new CustomerThrottleContext(default(uint), template.CustomerThrottle, template.TokenBucket, skipValidation: true);
        }

        partial void Validate();
        private CustomerThrottleContext WithFactory(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle> customerThrottle = default(ImmutableObjectGraph.Optional<Banda.AsyncThrottledFunctionExecutor.CustomerThrottle>), ImmutableObjectGraph.Optional<System.Object> tokenBucket = default(ImmutableObjectGraph.Optional<System.Object>), ImmutableObjectGraph.Optional<uint> identity = default(ImmutableObjectGraph.Optional<uint>))
        {
            if ((identity.IsDefined && identity.Value != this.Identity) || (customerThrottle.IsDefined && customerThrottle.Value != this.CustomerThrottle) || (tokenBucket.IsDefined && tokenBucket.Value != this.TokenBucket))
            {
                return new CustomerThrottleContext(identity: identity.GetValueOrDefault(this.Identity), customerThrottle: customerThrottle.GetValueOrDefault(this.CustomerThrottle), tokenBucket: tokenBucket.GetValueOrDefault(this.TokenBucket), skipValidation: false);
            }
            else
            {
                return this;
            }
        }

#pragma warning disable 649 // field initialization is optional in user code

        private struct Template
        {
            internal Banda.AsyncThrottledFunctionExecutor.CustomerThrottle CustomerThrottle;
            internal System.Object TokenBucket;
        }
#pragma warning restore 649
    }
}